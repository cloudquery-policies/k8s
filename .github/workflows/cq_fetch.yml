name: cq_policy_run

on:
  schedule:
    - cron: '0 1 * * *' # Run every night on 01:00am UTC
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  nightly_policy_run:
    if: github.event_name != 'schedule' || (github.event_name == 'schedule' && github.repository == 'cloudquery-policies/k8s')
    runs-on: ubuntu-latest
    env:
      KUBECONFIG_PATH: ~/.kube/config
      TF_VAR_SUFFIX: integration
      TF_VAR_PREFIX: cq-testing
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17

      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.4.2
        with:
          minikube version: 'v1.24.0'
          kubernetes version: 'v1.22.2'

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v1

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Check out cq-provider-k8s
        uses: actions/checkout@master
        with:
          repository: cloudquery/cq-provider-k8s
          path: cq-provider-k8s

      - name: Deploy postgres
        id: deploy_pg
        working-directory: cq-provider-k8s/resources/integration_tests/infra
        run: |
          kubectl apply -f  postgres.yml
          kubectl wait --for=condition=available --timeout=120s deployment/postgresql-db
          url=$(minikube service postgres --url --format={{.IP}}:{{.Port}})
          echo "::set-output name=host::${url%:*}"
          echo "::set-output name=port::${url#*:}"
          kubepath=$(realpath ${{env.KUBECONFIG_PATH}})
          echo "::set-output name=kubepath::${kubepath}"

      - name: Apply terraform resources
        env:
          KUBE_CONFIG_PATH: ${{env.KUBECONFIG_PATH}}
        working-directory: cq-provider-k8s/resources/integration_tests/infra
        run: |
          terraform init
          terraform apply -auto-approve -var test_prefix=${{env.TF_VAR_PREFIX}} -var test_suffix=${{env.TF_VAR_SUFFIX}}

      - name: check config
        run: cat ${{env.KUBECONFIG_PATH}}

      - name: Cache CQ
        id: cache-cq-binary
        uses: actions/cache@v2
        with:
          path: cloudquery
          key: ${{ runner.os }}-${{ hashFiles('cloudquery') }}

      - name: Download Cloudquery
        if: steps.cache-cq-binary.cache-hit != 'true'
        run: |
          curl -L https://github.com/cloudquery/cloudquery/releases/latest/download/cloudquery_${OS}_x86_64 -o cloudquery
          chmod a+x cloudquery
        env:
          OS: Linux

      - name: Cq fetch
        run: |
          ./cloudquery fetch --config ./test/policy_cq_config.hcl --enable-console-log --fail-on-error
        env:
          CQ_NO_TELEMETRY: 1
          KUBECONFIG: ${{steps.deploy_pg.outputs.kubepath}} # path should be absolute
          CQ_DSN: postgres://postgres:pass@${{steps.deploy_pg.outputs.host}}:${{steps.deploy_pg.outputs.port}}/postgres?sslmode=disable

      - name: Policy Run
        run: |
          ./cloudquery policy run --config ./test/policy_cq_config.hcl --enable-console-log --stop-on-failure
        env:
          CQ_NO_TELEMETRY: 1
          KUBECONFIG: ${{steps.deploy_pg.outputs.kubepath}} # path should be absolute
          CQ_DSN: postgres://postgres:pass@${{steps.deploy_pg.outputs.host}}:${{steps.deploy_pg.outputs.port}}/postgres?sslmode=disable

      - name: Destroy terraform resources
        env:
          KUBE_CONFIG_PATH: ${{env.KUBECONFIG_PATH}}
        working-directory: resources/integration_tests/infra
        run: |
          terraform destroy  -auto-approve -var test_prefix=${{env.TF_VAR_PREFIX}} -var test_suffix=${{env.TF_VAR_SUFFIX}}

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: ${{ failure() }}
        env:
          SLACK_CHANNEL: oss-tests
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: 'K8S Policies - nightly run failed'
          SLACK_TITLE: K8S - nightly fetch failed
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
